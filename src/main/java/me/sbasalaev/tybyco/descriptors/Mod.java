/*
 * The MIT License
 *
 * Copyright 2023 Sergey Basalaev
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
package me.sbasalaev.tybyco.descriptors;

/**
 * Access modifier for Java element.
 * Apart from the standard Java modifers the element may also be marked
 * deprecated, synthetic or mandated.
 *
 * @author Sergey Basalaev
 */
public enum Mod {

    /** Marked or implicitely {@code public} in the source code. */
    PUBLIC("public"),

    /** Marked {@code protected} in the source code. */
    PROTECTED("protected"),

    /** Marked {@code private} in the source code. */
    PRIVATE("private"),

    /** Marked or implicitly {@code static} in the source code. */
    STATIC("static"),

    /** Marked or implicitly {@code abstract} in the source code. */
    ABSTRACT("abstract"),

    /** Marked or implicitly final in the source code. */
    FINAL("final"),

    /** Transient field is not written or read by a persistent object manager. */
    TRANSIENT("transient"),

    /** Volatile field is not cached by threads. */
    VOLATILE("volatile"),

    /** Marks method as having variable number of parameters. */
    VARARGS("/* varargs */"),

    /**
     * Declared {@code strictfp} in the source.
     * In Java 1.2 through Java 16 this modifier required the method to use
     * the strict floating point arithmetic. Modern Java implementations
     * always use the strict floating-point arithmetic and Java 17 requires it.
     */
    @Deprecated(since = "Java 17")
    STRICT("strictfp"),

    /** Declared {@code synchronized}, invocation is wrapped by a monitor use. */
    SYNCHRONIZED("synchronized"),

    /** Declared {@code native}. */
    NATIVE("native"),

    /** A bridge method generated by compiler. */
    BRIDGE("/* bridge */"),

    /** Indicates that any module which depends on the current module, implicitly declares a dependence on the module indicated by this entry. */
    TRANSITIVE("transitive"),

    /** Indicates that the module does not declare any open packages but is treated as if all packages are open. */
    OPEN("open"),

    /**
     * Implicitely declared in the source.
     * Mandated element is an element that does not explicitely appear in the
     * source but is implicitely present according to the language specification
     * and all compilers for the language must emit it.
     * <p>
     * JVM only supports mandated attribute on modules, module directives and
     * formal parameters.
     */
    MANDATED("/* mandated */"),

    /**
     * Is not explicitely and implicitely declared in the source.
     * Synthetic element is an element that does not appear in the source and is
     * an implementation artifact of a particular compiler.
     */
    SYNTHETIC("/* synthetic */"),

    /** Element that the programmers are discouraged to use. */
    DEPRECATED("/* deprecated */");

    private final String keyword;

    private Mod(String keyword) {
        this.keyword = keyword;
    }

    /**
     * Java keyword corresponding to this modifier.
     * If there is no corresponding Java keyword the keyword is returned
     * as a block comment.
     */
    public String keyword() {
        return keyword;
    }
}
